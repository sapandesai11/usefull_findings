Component
=========
Every application has atleast one component which App or root component. 
It should contain logic only related to presentation not related to how data is fetched to display
 It encapsulates 
  1) data
  2) HTML template
  3) Logic
Requires 3 steps to be fully functional
  a. create
    -> export CompName(Pascle naming convention)
  b. register
    -> make an entry of CopmName in declarations array in app.module.ts file
  c. use
    -> user selector inside template for app component
 Instead of writing boiler plate code for creating comp, we can use angular CLI.
 ng g c copmname    
 P.S loo at the naming convention
  
Modules
=======
It is group of related components. Every application has atleast one module which is called App modules.
As application scales we want to breake into smaller and reusable modules.

Template
========
String Interpolation

Service
=======
It is injected using DI of angular. Every service must be inserted inside providers array of app.module.ts . 
Angular will have only one service instance for every service irrespective of no of comps consuming it.
It is good approach to have seperate layer for fetching data for unit testing as well as for future changes.

Event Bubbling/Event Propegation

Property binding 
================
@Component({
 selector:"app"
 template:`<img src="{{ imageUrl }}"/>`
 using property binding 
 template:`<img [src]="imageUrl"/>`
 
})
export class Comp{
 imageUrl = "url";
}

Attribute Binding
==================
@Component({
 selector:"app"
 template:`<table><tr><td [colspan]="colspan"></td></tr></table>`
 using property binding(like above) will give an error. instead use attribute binding 
 template:`<table><tr><td [attr.colspan]="colspan"></td></tr></table>`
 
})
export class Comp{
 colspan = 1;
}

for using bootstrap first u need to install it using npm than import it in style.css e.g
first run below cmd
npm install --save bootstrap
than in style.css add this sentence
@import "~bootstrap/dist/css/bootstrap.css";


Class Binding, Style binding 
============================
@Component({
 selector:"app"
 template:`<button [style.backgroundColor]="isActive ? 'red' : 'green'" class="btn btn-primary" [class.active]="isActive" (click)="onSave($event)"/>`
 
})
export class Comp{
 colspan = 1;
 isActive = true;
 
 let onSave = ($event) => {
  console.log('Save button clikced :-', $event);
 }
}

Event Binding
===============
@Component({
 selector:"app"
 template:`<button (click)="onSave($event)"/>`
 
})
export class Comp{
 colspan = 1;
 
 let onSave = ($event) => {
  console.log('Save button clikced :-', $event);
 }
}

Event Filttering
================
@Component({
 selector:"app"
 template:`<button (keyup)="onKeyup($event)"/>`
 using event filttering
 template:`<button (keyup.enter)="onKeyup()"/>`
 
})
export class Comp{
 colspan = 1;
 
 let onKeyUp = () => 
  console.log('Enter was pressed :-', $event);
 }
}


It is one way binding from component to html meaning any change in html will not update property in component
