Simple explaination given on the below link
https://docs.oracle.com/javase/tutorial/java/generics/types.html


Why Generics?
  It adds stability to code by adding compile time type checks.
  Generic Type is generic class or generic interface parameterized over type.
  Type parameter can be any non-primitive data type: any class type, any interface type, any array type, or even another type variable
  
Naming Convention
  Single first letter of type in upper case which is in contrast to the variable naming convention.
  
  E - Element
  K - Key
  N - Number
  T - Type
  V - Value
  S,U,V  2nd, 3rd, 4th types
 
Type Parameter
  It is provided at the time of declaring type class or type interface
  
Type Argument
  It is provided when invoking type class (instanttiating type class)
  
The Diamond
  From JAVA 7 , we can instantiate generic class without passing type argument while invoking the constructor of a generic class . e.g
  Empty triangular brackets formely called "The Diamond"
  Box<String> boc = new Box<>();

Multiple Parameter Type
  e.g
    public interface Shape<K, V> {

    K getShapeName();


    V getDiamonsions();


  }

  public class Circle<K, V> implements Shape<K, V>{

    private K key;
    private V value;

    public Circle(K key, V value) {
      this.key = key;
      this.value = value;
    }

    @Override
    public K getShapeName() {
      return this.key;
    }

    @Override
    public V getDiamonsions() {
      return this.value;
    }

  }

  public class Square<K, V> implements Shape<K, V> {

    private K shapeName;
    private V diamonsions;

    public Square(K shapeName, V diamonsions) {
      this.shapeName = shapeName;
      this.diamonsions = diamonsions;
    }

    @Override
    public K getShapeName() {
      return this.shapeName;
    }

    @Override
    public V getDiamonsions() {
      return this.diamonsions;
    }

  }

  public class MainApp {

    /**
     * @param args
     */
    public static void main(String[] args) {
      Circle<String, Integer> circle = new Circle<>("Circle", 50);
      Shape<String, Integer> square = new Square<>("Square", 50);


      System.out.println("Shape is " + circle.getShapeName() + " and it's redious is " + circle.getDiamonsions() + ".");
      System.out.println("Shape is " + square.getShapeName() + " and it's width is " + square.getDiamonsions() + ".");
      System.out.println(square.getClass());

    }

  }
